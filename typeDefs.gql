schema {
  query: Query
  mutation: Mutation
}

type Rhetoric {
    _id: ID
    dateCreated: String!
    createdBy: User!
    active: Boolean!
    slug: String!
    metaSlug: String!
    title: String!
    approved: Boolean!
    dateApproved: String
    approvedBy: User
    approvalCommentary: String
    bulletPoints: [BulletPoint!]!
    resources: [Resource!]!
    opinions: [Opinion!]!
    edits: [Edit!]!
    votes: [Vote!]!
}

type BulletPoint {
    _id: ID
    dateCreated: String!
    createdBy: User!
    active: Boolean!
    slug: String!
    metaSlug: String!
    content: String!
    approved: Boolean!
    dateApproved: String
    approvedBy: User
    approvalCommentary: String
    edits: [Edit!]!
    opinions: [Opinion!]!
    votes: [Vote!]!
}

type Resource {
    _id: ID
    dateCreated: String!
    createdBy: User!
    active: Boolean!
    slug: String!
    metaSlug: String!
    title: String!
    media: String!
    link: String!
    approved: Boolean!
    dateApproved: String
    approvedBy: User
    approvalCommentary: String
    edits: [Edit!]!
    opinions: [Opinion!]!
    votes: [Vote!]!
}

type Project {
    _id: ID
    dateCreated: String!
    createdBy: User!
    active: Boolean!
    metaSlug: String!
    title: String!
    link: String!
    description: String!
    approved: Boolean!
    dateApproved: String
    approvedBy: User
    approvalCommentary: String
    edits: [Edit!]!
    opinions: [Opinion!]!
    votes: [Vote!]!
    donations: [Donation!]!
}

type Opinion {
    _id: ID
    dateCreated: String!
    createdBy: User!
    active: Boolean!
    slug: String
    metaSlug: String!
    opinion: String!
    approved: Boolean!
    dateApproved: String
    approvedBy: String
    approvalCommentary: String
    documentID: ID!
    onModel: String!
    votes: [Vote!]!
}

type Edit {
    _id: ID
    dateCreated: String!
    createdBy: User!
    slug: String!
    metaSlug: String!
    oldDocumentID: ID!
    newDocumentID: ID!
    onModel: String!
    approved: Boolean!
    dateApproved: String
    approvedBy: User
    approvalCommentary: String
    votes: [Vote!]!
}

type Donation {
    _id: ID
    dateCreated: String!
    createdBy: User!
    createdFor: User!
    ticker: String!
    amount: Float!
    active: Boolean! # Unpaid donations will be false
    paid: Boolean!
    invoiceID: String!
    invoiceURL: String!
    accruing: Boolean! # If the donation is attributable towards total donated for upvotes/downvotes
    onModel: String! # The model the donation is applicable to
    documentID: ID # Only really used if non-acruuing vote to buy certificates etc
    bonusPercentage: Float # The bonus percentage applied to their original donation
    preBonusAmount: Float # The donation amount before the bonus was applied
}

type Certificate {
    _id: ID
    dateCreated: String!
    createdBy: User!
    active: Boolean!
    activeUntil: String! # Date the certificate is active for
    name: String!
    protagonistic: Boolean
    donationID: Donation!
}

type Vote {
    _id: ID
    dateCreated: String!
    dateUpdated: String!
    createdBy: User!
    slug: String
    metaSlug: String!
    onModel: String!
    documentID: ID!
    upVote: Boolean! # False if downvote, true if upvote
}

type User {
    _id: ID
    dateCreated: String!
    username: String!@unique
    email: String!@unique
    emailVerified: Boolean!
    password: String!
    admin: Boolean!
    active: Boolean! # If user wants to deactive their account any make previous actions anonymous
    banned: Boolean! # If user is banned
    bannedReason: String
    bannedUntil: String # Timestamp user is banned until
    certified: Boolean!
    certificates: [Certificate!]!
    maximalist: Boolean
    donations: [Donation!]! # Array containing donation document IDs
    accruedDonations: Float! # Total amount user has donated (including any boosts), updated when payment is successfuly proccessed
    opinions: [Opinion!]!
    votes: [Vote!]!
    edits: [Edit!]!
    rhetoric: [Rhetoric!]!
    bulletPoints: [BulletPoint!]!
    resources: [Resource!]!
    projects: [Project!]!
    referrals: [User!]! # Users this user has referred
    referredBy: User # User that referred this user
}

type Crypto {
    _id: ID
    ticker: String!
    valueUSD: Float!
}

type MetaState {
    maintenance: Boolean! # Currently performing maintenance
    nextMaintenance: String! # Timestamp of next maintenance period
    maintenanceCosts: Int! # Costs of maintaining the server and BTCPay server
}

# All types below are only used for query and mutation responses

type Token {
    token: String!
}

type ReferralInfluence {
    _id: ID!
    username: String!
    referralInfluence: Float!
}

type AllSlugs {
    protagonistic: [String!]!
    antagonistic: [String!]!
}

type MostReferrals {
    _id: ID!
    username: String!
    referralAmount: Float!
}

type TopAllegiance {
    allegiance: String!
    amount: Float!
}

type Username {
    _id: ID!
    username: String!
}

type Query {
    currentUser: User
    allUsernames: [Username!]!

    docIDSpecificDonation(_id: ID!): Donation
    docIDSpecificOpinions(_id: String!, onModel: String!, sortType: String!, sortDirection: String, index: Int!): [Opinion]
    docIDSpecificOpinionCount(onModel: String!, _id: ID!): Int
    docIDSpecificVotes(onModel: String!, _id: ID!): [Vote!]!

    allProjects(metaSlug: String): [Project!]! #Get all projects with an optional filer for metaSlug
    allRhetoric(metaSlug: String): [Rhetoric!]! #Get all rhetoric with an optional filter for metaSlug
    argumentSpecificRhetoric(metaSlug: String!, slug: String!): Rhetoric #Get argument-specific bulletpoints and resources
    allSlugs: AllSlugs #Get all slugs currently in use

    checkDonation(_id: ID!): Boolean #Check if a donation has been paid
    cryptoValue(ticker: String!): Float #Get the current value of a cryptocurrency

    topArguments(onModel: String!, descending: Boolean!, limit: Int!): [Rhetoric!]! #Most/Least Upvoted/Opinionated Rhetoric - onModel = Opinion or Vote
    topBulletPoints(onModel: String!, descending: Boolean!, limit: Int!): [BulletPoint!]! #Most/Least Upvoted/Opinionated BulletPoint - onModel = Opinion or Vote
    topResources(onModel: String!, descending: Boolean!, limit: Int!): [Resource!]! #Most/Least Upvoted/Opinionated Resource - onModel = Opinion or Vote
    topProjects(onModel: String!, descending: Boolean!, limit: Int!): [Project!]! #Most/Least Upvoted/Opinionated Project - onModel = Opinion or Vote or Donation
    topOpinions(descending: Boolean!, limit: Int!): [Opinion] #Most/Least Upvoted Opinions
    topAllegiances(type: String!): [TopAllegiance!]! #Allegiance leaderboards - Types: mostRaised, mostInfluence, mostUpvotes, mostUsers, mostArguments, mostResources, mostBulletPoints

    recentOpinions(limit: Int!): [Opinion!]!
    mostInfluentialUsers(limit: Int!): [User!]!
    mostReferrals(limit: Int!): [MostReferrals!]!
    mostReferralInfluence(limit: Int!): [ReferralInfluence!]!

    unapprovedRhetoric(_id: ID): [Rhetoric!]!
    unapprovedBulletPoints(_id: ID): [BulletPoint!]!
    unapprovedResources(_id: ID): [Resource!]!
    unapprovedProjects(_id: ID): [Project!]!
}

type Mutation {
    signinUser(email: String!, password: String!): Token
    signupUser(username: String!, email: String!, password: String!, ref: ID): Boolean
    verifyEmail(token: String!): Token
    resendRegistrationEmail(email: String!): Boolean
    setAllegiance(maximalist: Boolean!): Boolean

    startPasswordReset(email: String!): Boolean
    verifyPasswordReset(token: String!): Token
    resendPasswordEmail(email: String!): Boolean
    resetPassword(token: String!, newPassword1: String!, newPassword2: String!): Token

    submitOpinion(onModel: String!, documentID: ID!, opinion: String!): Float
    submitVote(onModel: String!, documentID: ID!, upVote: Boolean!): Float
    submitDonation(amount: String!, userID: ID!, onModel: String, documentID: ID): ID
    submitBulletPoint(metaSlug: String!, slug: String!, content: String!): ID
    submitResource(metaSlug: String!, slug: String!, title: String!, media: String!, link: String!): ID
    submitRhetoric(metaSlug: String!, slug: String!, title: String!): ID
    submitProject(metaSlug: String!, title: String!, link: String!, description: String!): ID

    submitEditOpinion(documentID: ID!, opinion: String!): Boolean
    submitEditRhetoric(documentID: ID!, metaSlug: String!, slug: String!, title: String!): Boolean
    submitEditBulletPoint(documentID: ID!, metaSlug: String!, slug: String!, content: String!): Boolean
    submitEditResource(documentID: ID!, metaSlug: String!, slug: String!, title: String!, media: String!, link: String!): Boolean
    submitEditProject(documentID: ID!, metaSlug: String!, title: String!, link: String!, description: String!): ID
    
    toggleApproval(onModel: String!, documentID: ID!, approved: Boolean!, approvalCommentary: String!): Boolean
}